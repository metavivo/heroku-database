<?xml version="1.0" encoding="UTF-8"?>
<opml version="1.0">
<head>
<title></title>
</head>
<body>
	<outline text="create the app and run it locally">
		<outline text="reference web page">
			<outline text="https://medium.com/@RG2021/flask-with-sqlalchemy-database-39fc0959609c"/>
		</outline>
		<outline text="create the virtual environment">
			<outline text="create the virtual environment">
				<outline text="virtualenv venv"/>
			</outline>
			<outline text="activate the virtualenv">
				<outline text="source ./venv/bin/activate.csh "/>
			</outline>
			<outline text="install libraries">
				<outline text="pip3 install flask"/>
				<outline text="pip3 install Flask-SQLAlchemy"/>
			</outline>
			<outline text="check installed libraries">
				<outline text="python"/>
				<outline text="import flask"/>
				<outline text="import flask_sqlalchemy"/>
				<outline text="exit()"/>
			</outline>
		</outline>
		<outline text="create the app">
			<outline text="create the html file">
				<outline text="mkdir templates"/>
				<outline text="cd templates"/>
				<outline text="touch index.html"/>
				<outline text="index.html">
					<outline text="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;&#9;&#9;&lt;title&gt; MyApp &lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;&#9;&#10;&#9;&lt;!-- Its the form where a user can submit his or her name and email --&gt;&#10;&#10;&#9;&lt;form class=&quot;form-inline&quot; action=&quot;&quot; method=&quot;POST&quot;&gt;&#10;&#9;&#9;&lt;label&gt;Name&lt;/label&gt;&#10;&#9;  &#9;&lt;input type=&quot;text&quot; id=&quot;name&quot; placeholder=&quot;Enter Name&quot; name=&quot;name&quot;&gt;&#10;&#9;  &#9;&lt;label&gt;Email&lt;/label&gt;&#10;&#9;  &#9;&lt;input type=&quot;email&quot; id=&quot;email&quot; placeholder=&quot;Enter Email Id&quot; name=&quot;email&quot;&gt;&#10;&#9;  &#9;&lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;&#10;&#9;&lt;/form&gt;&#10;&#10;&#10;&#9;&lt;!-- The table where all the data from the DB will be appeared --&gt;&#10;&#10;&#9;&lt;table class=&quot;data&quot; border=&quot;1&quot; style=&quot;width: 100%; margin-top: 20px; text-align: center;&quot;&gt;&#10;&#9;&#9;&lt;tr&gt;&#10;&#9;&#9;&#9;&lt;th colspan=&quot;3&quot;&gt;User Data&lt;/th&gt;&#10;&#9;  &#9;&lt;/tr&gt;&#10;&#9;  &#9;&lt;tr&gt;&#10;&#9;  &#9;&#9;&lt;td&gt;Sr.No.&lt;/td&gt;&#10;&#9;    &#9;&lt;td&gt;Name&lt;/td&gt;&#10;&#9;    &#9;&lt;td&gt;Email&lt;/td&gt;&#10;&#9;  &#9;&lt;/tr&gt;&#10;&#10;&#9;  &#9;&lt;!-- The user_data is a variable containing all the user data from the DB. --&gt;&#10;&#9;  &#9;&#10;&#9;  &#9;{% for user in user_data %}&#10;&#9;  &#9;&lt;tr&gt;&#10;&#9;  &#9;&#9;&lt;td&gt;{{user._id}}&lt;/td&gt;&#10;&#9;  &#9;&#9;&lt;td&gt;{{user.name}}&lt;/td&gt;&#10;&#9;  &#9;&#9;&lt;td&gt;{{user.email}}&lt;/td&gt;&#10;&#9;  &#9;&lt;/tr&gt;&#10;&#9;  &#9;{% endfor %}&#10;&#10;&#9;&lt;/table&gt;&#10;&lt;/body&gt;&#10;"/>
				</outline>
			</outline>
			<outline text="app.py">
				<outline text="from flask import Flask , render_template, jsonify, request, redirect, url_for, jsonify&#10;from flask_sqlalchemy import SQLAlchemy&#10;&#10;app = Flask(__name__)&#10;&#10;app.config[&apos;SQLALCHEMY_TRACK_MODIFICATIONS&apos;] = False&#10;app.config[&apos;SQLALCHEMY_DATABASE_URI&apos;] = &apos;sqlite:///User.sqlite3&apos;&#10;&#9;&#10;db = SQLAlchemy(app)&#10;&#10;class User(db.Model):&#10;&#9;# Defines the Table Name user&#10;&#9;__tablename__ = &quot;user&quot;&#10;&#10;&#9;# Makes three columns into the table id, name, email&#10;&#9;_id = db.Column(db.Integer, primary_key=True, autoincrement=True)&#10;&#9;name = db.Column(db.String(100), nullable=False)&#10;&#9;email = db.Column(db.String(100), nullable=False)&#10;&#10;&#9;# A constructor function where we will pass the name and email of a user and it gets add as a new entry in the table.&#10;&#9;def __init__(self, name, email):&#10;&#9;&#9;self.name = name&#10;&#9;&#9;self.email = email&#10;&#10;# Control will come here and then gets redirect to the index function&#10;@app.route(&quot;/&quot;)&#10;def home():&#10;&#9;return redirect(url_for(&apos;index&apos;))&#10;&#10;&#10;@app.route(&quot;/index&quot;, methods = [&quot;GET&quot;, &quot;POST&quot;])&#10;def index():&#10;&#9;if request.method == &apos;POST&apos;: # When a user clicks submit button it will come here.&#10;&#9;&#9;data = request.form # request the data from the form in index.html file&#10;&#9;&#9;name = data[&quot;name&quot;]&#10;&#9;&#9;email = data[&quot;email&quot;]&#10;&#10;&#9;&#9;new_data = User(name, email)&#10;&#9;&#9;db.session.add(new_data)&#10;&#9;&#9;db.session.commit()&#10;&#10;&#9;&#9;user_data = User.query.all()&#10;&#10;&#9;&#9;return render_template(&quot;index.html&quot;, user_data = user_data) # passes user_data variable into the index.html file.&#10;&#10;&#9;return render_template(&quot;index.html&quot;)&#10;&#9;&#10;&#10;if __name__==&quot;__main__&quot;:&#10;&#9;db.create_all()&#10;&#9;app.run(debug=True)"/>
			</outline>
		</outline>
		<outline text="Python version">
			<outline text="check the version of Python running in the current virtual environment">
				<outline text="python -V"/>
			</outline>
			<outline text="specify a Python runtime">
				<outline text="experim2 &gt; echo &apos;&lt;Python version&gt;&apos; &gt; runtime.txt"/>
			</outline>
		</outline>
		<outline text="run the app">
			<outline text="python app.py"/>
		</outline>
	</outline>
	<outline text="deploy the app online">
		<outline text="reference web page">
			<outline text="https://medium.com/analytics-vidhya/heroku-deploy-your-flask-app-with-a-database-online-d19274a7a749"/>
		</outline>
		<outline text="key info">
			<outline text="To deploy a Flask Application with a Database on Heroku all we have to modify is the app.config[‘SQLALCHEMY_DATABASE_URI’] line in our codebase if there’s a Database attached to it."/>
		</outline>
		<outline text="install libraries">
			<outline text="pip3 install gunicorn"/>
			<outline text="pip3 install psycopg2"/>
			<outline text="pip3 install psycopg2-binary"/>
		</outline>
		<outline text="check installed libraries">
			<outline text="python"/>
			<outline text="import gunicorn"/>
			<outline text="import psycopg2"/>
			<outline text="exit()"/>
		</outline>
		<outline text="create the Heroku app and get the app name">
			<outline text="heroku create"/>
		</outline>
		<outline text="Procfile">
			<outline text="echo &apos;web: gunicorn app:app&apos; &gt; Procfile"/>
		</outline>
		<outline text="requirements file">
			<outline text="pip freeze &gt; requirements_bak1.txt"/>
			<outline text="IF THERE IS AN ERROR AFTER DEPLOYMENT">
				<outline text="heroku logs"/>
				<outline text="&lt;check if some module should be added to requirements.txt&gt;">
					<outline text="for example, from the message &quot;ImportError: cannot import name &apos;BaseResponse&apos; from &apos;werkzeug.wrappers&apos; &quot; -&gt; Werkzeug==1.0.1"/>
					<outline text="We can check the modules from the requirements.txt generated by the pip freeze command">
						<outline text="pip freeze &gt; requirements_bak1.txt"/>
					</outline>
				</outline>
			</outline>
			<outline text="&lt;put the essential modules in requirements.txt&gt;">
				<outline text="alabaster==0.7.12&#10;alembic==1.4.2&#10;aniso8601==9.0.1&#10;appdirs==1.4.4&#10;astor==0.8.1&#10;autoenv==1.0.0&#10;Babel==2.9.0&#10;blis==0.7.4&#10;build==0.8.0&#10;catalogue==2.0.1&#10;certifi==2020.12.5&#10;chardet==4.0.0&#10;click==7.1.2&#10;colorama==0.4.4&#10;cymem==2.0.5&#10;distlib==0.3.4&#10;docopt==0.6.2&#10;docutils==0.16&#10;dominate==2.6.0&#10;filelock==3.7.1&#10;Flask==1.1.2&#10;Flask-Bootstrap==3.3.7.1&#10;Flask-Cors==3.0.10&#10;Flask-gTTS==0.18&#10;flask-heroku==0.1.9&#10;Flask-Migrate==2.5.2&#10;Flask-RESTful==0.3.9&#10;Flask-Script==2.0.6&#10;Flask-SQLAlchemy==2.4.4&#10;gensim==4.0.1&#10;gTTS==2.2.2&#10;gunicorn==20.0.4&#10;h5py==3.2.1&#10;hy==0.20.0&#10;idna==2.10&#10;imagesize==1.2.0&#10;itsdangerous==1.1.0&#10;Jinja2==2.11.2&#10;joblib==1.0.1&#10;Keras==2.4.3&#10;Mako==1.1.3&#10;MarkupSafe==1.1.1&#10;murmurhash==1.0.5&#10;nltk==3.5&#10;packaging==20.9&#10;pathy==0.4.0&#10;pdfminer.six==20200517&#10;pdfplumber==0.5.25&#10;pep517==0.12.0&#10;Pillow==8.1.0&#10;pip-tools==6.8.0&#10;pipreqs==0.4.11&#10;platformdirs==2.5.2&#10;pockets==0.9.1&#10;preshed==3.0.5&#10;psycopg2==2.9.3&#10;psycopg2-binary==2.8.5&#10;pycryptodome==3.9.9&#10;pydantic==1.7.3&#10;Pygments==2.8.1&#10;pyparsing==2.4.7&#10;python-dateutil==2.8.1&#10;python-dotenv==0.14.0&#10;python-editor==1.0.4&#10;pyttsx3==2.90&#10;pytz==2021.1&#10;PyYAML==5.4.1&#10;regex==2020.11.13&#10;requests==2.25.1&#10;rply==0.7.8&#10;scipy==1.8.1&#10;six==1.15.0&#10;smart-open==3.0.0&#10;snowballstemmer==2.1.0&#10;sortedcontainers==2.3.0&#10;spacy==3.0.5&#10;spacy-legacy==3.0.1&#10;speake3==0.3&#10;Sphinx==3.5.3&#10;sphinx-rtd-theme==0.5.1&#10;sphinxcontrib-applehelp==1.0.2&#10;sphinxcontrib-devhelp==1.0.2&#10;sphinxcontrib-htmlhelp==1.0.3&#10;sphinxcontrib-jsmath==1.0.1&#10;sphinxcontrib-napoleon==0.7&#10;sphinxcontrib-qthelp==1.0.3&#10;sphinxcontrib-serializinghtml==1.1.4&#10;SQLAlchemy==1.3.19&#10;srsly==2.4.0&#10;thinc==8.0.2&#10;tomli==2.0.1&#10;tqdm==4.59.0&#10;typer==0.3.2&#10;urllib3==1.26.4&#10;virtualenv==20.15.1&#10;visitor==0.1.3&#10;Wand==0.6.5&#10;wasabi==0.8.2&#10;Werkzeug==1.0.1&#10;yarg==0.1.9&#10;"/>
			</outline>
		</outline>
		<outline text="check the project structure">
			<outline text="MyApp/&#10;     |- templates&#10;        |- index.html&#10;     |- app.py&#10;     |- requirements.txt&#10;     |- Procfile"/>
		</outline>
		<outline text="get Heroku Database URL">
			<outline text="create the Heroku database">
				<outline text="heroku addons:create heroku-postgresql:hobby-dev --app &lt;app name&gt;"/>
			</outline>
			<outline text="get the database URL">
				<outline text="method 1">
					<outline text="heroku config --app &lt;app name&gt;"/>
				</outline>
				<outline text="method 2">
					<outline text="from the Heroku interface: click on the app -&gt; Heroku Postgres -&gt; Settings -&gt; Database credentials -&gt; View credentials -&gt; URI"/>
				</outline>
			</outline>
		</outline>
		<outline text="replace the value of app.config">
			<outline text="replace the value of app.config[‘SQLALCHEMY_DATABASE_URI’] line in the “app.py” file with this Database URL"/>
		</outline>
		<outline text="push your code onto Heroku app">
			<outline text="initialize your GIT repository">
				<outline text="git init"/>
			</outline>
			<outline text="add everything to the commit stage">
				<outline text="git add ."/>
			</outline>
			<outline text="commit your entire code to the repo">
				<outline text="git commit -m &quot;initial commit&quot;"/>
			</outline>
			<outline text="make your Heroku app as the remote repository">
				<outline text="heroku git:remote -a &lt;app name&gt;"/>
			</outline>
			<outline text="push everything onto your Heroku app repository ">
				<outline text="git push heroku master"/>
			</outline>
			<outline text="create the Tables and their structure that we have defined in our code into Heroku Database">
				<outline text="heroku run python"/>
				<outline text="from app import db"/>
				<outline text="db.create_all()"/>
				<outline text="exit()"/>
			</outline>
			<outline text="check the app">
				<outline text="so after this Heroku will automatically download and install all the necessary packages and dependencies from your requirements.txt file and finally, your app should be running at, https://&lt;app name&gt;.herokuapp.com/"/>
			</outline>
			<outline text="if the app is not running and there is the &quot;Application Error&quot;">
				<outline text="heroku logs --tail">
					<outline text="bash: gunicorn: command not found">
						<outline/>
					</outline>
				</outline>
			</outline>
		</outline>
	</outline>
</body>
</opml>
