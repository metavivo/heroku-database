<?xml version="1.0" encoding="UTF-8"?>
<opml version="1.0">
<head>
<title></title>
</head>
<body>
	<outline text="group1">
		<outline text="create the virtual environment">
			<outline text="virtualenv venv"/>
		</outline>
		<outline text="activate the virtualenv">
			<outline text="source ./venv/bin/activate.csh "/>
		</outline>
		<outline text="check the version of Python running in the current virtual environment">
			<outline text="python -V"/>
		</outline>
		<outline text="specify a Python runtime">
			<outline text="experim2 &gt; echo &apos;&lt;Python version&gt;&apos; &gt; runtime.txt"/>
		</outline>
		<outline text="test the app locally">
			<outline text="python app.py"/>
		</outline>
		<outline text="create Procfile">
			<outline text="echo &apos;web: gunicorn app:app&apos; &gt; Procfile"/>
		</outline>
		<outline text="Python Dependencies in requirements.txt">
			<outline text="option 1 - NOT WORKING">
				<outline text="touch requirements.txt"/>
				<outline text="pip freeze -r requirements.txt | sed &apos;/freeze/,$ d&apos;"/>
			</outline>
			<outline text="option 2">
				<outline text="pip freeze &gt; requirements.txt"/>
				<outline text="&lt;remove the line with &quot;sentita&quot;&gt;"/>
			</outline>
			<outline text="option 3: pipreqs - BEST!">
				<outline text="pipreqs"/>
			</outline>
		</outline>
		<outline text="create a new app in Heroku (if not existing)">
			<outline text="option 1: we choose the name">
				<outline text="heroku create &lt;name&gt;"/>
			</outline>
			<outline text="option 2: Heroku will choose the name">
				<outline text="heroku create"/>
			</outline>
		</outline>
		<outline text="create a new Git repository">
			<outline text="&lt;go to the app directory&gt;"/>
			<outline text="git init"/>
			<outline text="heroku git:remote -a &lt;name of the app&gt;"/>
		</outline>
		<outline text="commit your code to the repository">
			<outline text="git add ."/>
			<outline text="git commit -am &quot;&lt;il mio titolo&gt;&quot;"/>
		</outline>
		<outline text="deploy the Git repository to Heroku">
			<outline text="git push heroku master"/>
		</outline>
		<outline text="THERE IS AN ERROR">
			<outline text="heroku logs"/>
			<outline text="&lt;check if some module should be added to requirements.txt&gt;">
				<outline text="for example, from the message &quot;ImportError: cannot import name &apos;BaseResponse&apos; from &apos;werkzeug.wrappers&apos; &quot; -&gt; Werkzeug==1.0.1"/>
				<outline text="We can check the modules from the requirements.txt generated by the pip freeze command">
					<outline text="pip freeze &gt; requirements_bak1.txt"/>
				</outline>
			</outline>
		</outline>
	</outline>
	<outline text="group2">
		<outline text="create the app and run it locally">
			<outline text="reference web page">
				<outline text="https://medium.com/@RG2021/flask-with-sqlalchemy-database-39fc0959609c"/>
			</outline>
			<outline text="create the virtual environment">
				<outline text="create the virtual environment">
					<outline text="virtualenv venv"/>
				</outline>
				<outline text="activate the virtualenv">
					<outline text="source ./venv/bin/activate.csh "/>
				</outline>
				<outline text="install libraries">
					<outline text="pip3 install flask"/>
					<outline text="pip3 install Flask-SQLAlchemy"/>
				</outline>
				<outline text="check installed libraries">
					<outline text="python"/>
					<outline text="import flask"/>
					<outline text="import Flask-SQLAlchemy"/>
					<outline text="import gunicorn"/>
				</outline>
			</outline>
			<outline text="create the app">
				<outline text="create the html file">
					<outline text="mkdir templates"/>
					<outline text="cd templates"/>
					<outline text="touch index.html"/>
					<outline text="index.html">
						<outline text="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;&#9;&#9;&lt;title&gt; MyApp &lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;&#9;&#10;&#9;&lt;!-- Its the form where a user can submit his or her name and email --&gt;&#10;&#10;&#9;&lt;form class=&quot;form-inline&quot; action=&quot;&quot; method=&quot;POST&quot;&gt;&#10;&#9;&#9;&lt;label&gt;Name&lt;/label&gt;&#10;&#9;  &#9;&lt;input type=&quot;text&quot; id=&quot;name&quot; placeholder=&quot;Enter Name&quot; name=&quot;name&quot;&gt;&#10;&#9;  &#9;&lt;label&gt;Email&lt;/label&gt;&#10;&#9;  &#9;&lt;input type=&quot;email&quot; id=&quot;email&quot; placeholder=&quot;Enter Email Id&quot; name=&quot;email&quot;&gt;&#10;&#9;  &#9;&lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;&#10;&#9;&lt;/form&gt;&#10;&#10;&#10;&#9;&lt;!-- The table where all the data from the DB will be appeared --&gt;&#10;&#10;&#9;&lt;table class=&quot;data&quot; border=&quot;1&quot; style=&quot;width: 100%; margin-top: 20px; text-align: center;&quot;&gt;&#10;&#9;&#9;&lt;tr&gt;&#10;&#9;&#9;&#9;&lt;th colspan=&quot;3&quot;&gt;User Data&lt;/th&gt;&#10;&#9;  &#9;&lt;/tr&gt;&#10;&#9;  &#9;&lt;tr&gt;&#10;&#9;  &#9;&#9;&lt;td&gt;Sr.No.&lt;/td&gt;&#10;&#9;    &#9;&lt;td&gt;Name&lt;/td&gt;&#10;&#9;    &#9;&lt;td&gt;Email&lt;/td&gt;&#10;&#9;  &#9;&lt;/tr&gt;&#10;&#10;&#9;  &#9;&lt;!-- The user_data is a variable containing all the user data from the DB. --&gt;&#10;&#9;  &#9;&#10;&#9;  &#9;{% for user in user_data %}&#10;&#9;  &#9;&lt;tr&gt;&#10;&#9;  &#9;&#9;&lt;td&gt;{{user._id}}&lt;/td&gt;&#10;&#9;  &#9;&#9;&lt;td&gt;{{user.name}}&lt;/td&gt;&#10;&#9;  &#9;&#9;&lt;td&gt;{{user.email}}&lt;/td&gt;&#10;&#9;  &#9;&lt;/tr&gt;&#10;&#9;  &#9;{% endfor %}&#10;&#10;&#9;&lt;/table&gt;&#10;&lt;/body&gt;&#10;"/>
					</outline>
				</outline>
				<outline text="app.py">
					<outline text="from flask import Flask , render_template, jsonify, request, redirect, url_for, jsonify&#10;from flask_sqlalchemy import SQLAlchemy&#10;&#10;app = Flask(__name__)&#10;&#10;app.config[&apos;SQLALCHEMY_TRACK_MODIFICATIONS&apos;] = False&#10;app.config[&apos;SQLALCHEMY_DATABASE_URI&apos;] = &apos;sqlite:///User.sqlite3&apos;&#10;&#9;&#10;db = SQLAlchemy(app)&#10;&#10;class User(db.Model):&#10;&#9;# Defines the Table Name user&#10;&#9;__tablename__ = &quot;user&quot;&#10;&#10;&#9;# Makes three columns into the table id, name, email&#10;&#9;_id = db.Column(db.Integer, primary_key=True, autoincrement=True)&#10;&#9;name = db.Column(db.String(100), nullable=False)&#10;&#9;email = db.Column(db.String(100), nullable=False)&#10;&#10;&#9;# A constructor function where we will pass the name and email of a user and it gets add as a new entry in the table.&#10;&#9;def __init__(self, name, email):&#10;&#9;&#9;self.name = name&#10;&#9;&#9;self.email = email&#10;&#10;# Control will come here and then gets redirect to the index function&#10;@app.route(&quot;/&quot;)&#10;def home():&#10;&#9;return redirect(url_for(&apos;index&apos;))&#10;&#10;&#10;@app.route(&quot;/index&quot;, methods = [&quot;GET&quot;, &quot;POST&quot;])&#10;def index():&#10;&#9;if request.method == &apos;POST&apos;: # When a user clicks submit button it will come here.&#10;&#9;&#9;data = request.form # request the data from the form in index.html file&#10;&#9;&#9;name = data[&quot;name&quot;]&#10;&#9;&#9;email = data[&quot;email&quot;]&#10;&#10;&#9;&#9;new_data = User(name, email)&#10;&#9;&#9;db.session.add(new_data)&#10;&#9;&#9;db.session.commit()&#10;&#10;&#9;&#9;user_data = User.query.all()&#10;&#10;&#9;&#9;return render_template(&quot;index.html&quot;, user_data = user_data) # passes user_data variable into the index.html file.&#10;&#10;&#9;return render_template(&quot;index.html&quot;)&#10;&#9;&#10;&#10;if __name__==&quot;__main__&quot;:&#10;&#9;db.create_all()&#10;&#9;app.run(debug=True)"/>
				</outline>
			</outline>
			<outline text="run the app">
				<outline text="python app.py"/>
			</outline>
		</outline>
		<outline text="deploy the app online">
			<outline text="reference web page">
				<outline text="https://medium.com/analytics-vidhya/heroku-deploy-your-flask-app-with-a-database-online-d19274a7a749"/>
			</outline>
			<outline text="key info">
				<outline text="To deploy a Flask Application with a Database on Heroku all we have to modify is the app.config[‘SQLALCHEMY_DATABASE_URI’] line in our codebase if there’s a Database attached to it."/>
			</outline>
			<outline text="delete the old virtual environment">
				<outline text="deactivate"/>
				<outline text="\rm -fr venv"/>
			</outline>
			<outline text="create the new virtual environment and activate it">
				<outline text="virtualenv venv"/>
				<outline text="source ./venv/bin/activate.csh "/>
			</outline>
			<outline text="install libraries">
				<outline text="pip3 install flask"/>
				<outline text="pip3 install Flask-SQLAlchemy"/>
				<outline text="pip3 install gunicorn"/>
				<outline text="pip3 install psycopg2"/>
				<outline text="pip3 install psycopg2-binary"/>
			</outline>
			<outline text="check installed libraries">
				<outline text="python"/>
				<outline text="import flask"/>
				<outline text="import Flask-SQLAlchemy"/>
				<outline text="import gunicorn"/>
			</outline>
			<outline text="create the Heroku app">
				<outline text="heroku create"/>
			</outline>
			<outline text="Procfile">
				<outline text="echo &apos;web: gunicorn app:app&apos; &gt; Procfile"/>
			</outline>
			<outline text="requirements file (see above)">
				<outline text="pip freeze &gt; requirements_bak1.txt"/>
				<outline text="IF THERE IS AN ERROR AFTER DEPLOYMENT">
					<outline text="heroku logs"/>
					<outline text="&lt;check if some module should be added to requirements.txt&gt;">
						<outline text="for example, from the message &quot;ImportError: cannot import name &apos;BaseResponse&apos; from &apos;werkzeug.wrappers&apos; &quot; -&gt; Werkzeug==1.0.1"/>
						<outline text="We can check the modules from the requirements.txt generated by the pip freeze command">
							<outline text="pip freeze &gt; requirements_bak1.txt"/>
						</outline>
					</outline>
				</outline>
			</outline>
			<outline text="check the project structure">
				<outline text="MyApp/&#10;     |- templates&#10;        |- index.html&#10;     |- app.py&#10;     |- requirements.txt&#10;     |- Procfile"/>
			</outline>
			<outline text="get Heroku Database URL">
				<outline text="create the Heroku database">
					<outline text="heroku addons:create heroku-postgresql:hobby-dev --app &lt;app name&gt;"/>
				</outline>
				<outline text="get the database URL">
					<outline text="method 1">
						<outline text="heroku config --app &lt;app name&gt;"/>
					</outline>
					<outline text="method 2">
						<outline text="from the Heroku interface: click on the app -&gt; Heroku Postgres -&gt; Settings -&gt; Database credentials -&gt; View credentials -&gt; URI"/>
					</outline>
				</outline>
			</outline>
			<outline text="replace the value of app.config">
				<outline text="replace the value of app.config[‘SQLALCHEMY_DATABASE_URI’] line in the “app.py” file with this Database URL"/>
			</outline>
			<outline text="push your code onto Heroku app">
				<outline text="initialize your GIT repository">
					<outline text="git init"/>
				</outline>
				<outline text="add everything to the commit stage">
					<outline text="git add ."/>
				</outline>
				<outline text="commit your entire code to the repo">
					<outline text="git commit -m &quot;initial commit&quot;"/>
				</outline>
				<outline text="make your Heroku app as the remote repository">
					<outline text="heroku git:remote -a &lt;app name&gt;"/>
				</outline>
				<outline text="push everything onto your Heroku app repository ">
					<outline text="git push heroku master"/>
				</outline>
				<outline text="create the Tables and their structure that we have defined in our code into Heroku Database">
					<outline text="heroku run python"/>
					<outline text="from app import db"/>
					<outline text="db.create_all()"/>
					<outline text="exit()"/>
				</outline>
				<outline text="check the app">
					<outline text="so after this Heroku will automatically download and install all the necessary packages and dependencies from your requirements.txt file and finally, your app should be running at, https://&lt;app name&gt;.herokuapp.com/"/>
				</outline>
				<outline text="if the app is not running and there is the &quot;Application Error&quot;">
					<outline text="heroku logs --tail">
						<outline text="bash: gunicorn: command not found">
							<outline/>
						</outline>
					</outline>
				</outline>
			</outline>
		</outline>
	</outline>
</body>
</opml>
